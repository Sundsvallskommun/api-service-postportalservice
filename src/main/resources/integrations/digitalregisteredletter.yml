openapi: 3.0.1
info:
  title: digital-registered-letter
  contact: {}
  license:
    name: MIT License
    url: https://opensource.org/licenses/MIT
  version: "2.4"
servers:
  - url: http://localhost:57503
    description: Generated server url
tags:
  - name: Scheduler Resource
    description: Manually trigger scheduled tasks
  - name: Letter Resource
    description: Send and manage digital registered letters
  - name: Eligibility Resource
    description: Check eligibility for sending digital registered letters
paths:
  /{municipalityId}/status/letters:
    post:
      tags:
        - Status Resource
      summary: Get status of given letters
      description: Returns the current status for each provided letterId
      operationId: getLetterStatuses
      parameters:
        - name: municipalityId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LetterStatusRequest"
        required: true
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/LetterStatus"
        "400":
          description: Bad Request
          content:
            application/problem+json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Problem"
                  - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server Error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /{municipalityId}/scheduler:
    post:
      tags:
        - Scheduler Resource
      summary: Trigger update letter information task
      description: Triggers the task that updates letter information
      operationId: updateLetterInformation
      parameters:
        - name: municipalityId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful Operation - OK
        "400":
          description: Bad request
          content:
            application/problem+json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Problem"
                  - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /{municipalityId}/letters:
    get:
      tags:
        - Letter Resource
      summary: Get all letters
      description: "Retrieves all letters for a municipality. Response is possible\
        \ to filter by any combination of department id, username, earliest and latest\
        \ created date."
      operationId: getLetters
      parameters:
        - name: municipalityId
          in: path
          required: true
          schema:
            type: string
        - name: orgId
          in: query
          description: Optional filter for matching organization id
          required: false
          schema:
            type: integer
            description: Optional filter for matching organization id
            format: int32
            example: 44
          example: 44
        - name: username
          in: query
          description: Optional filter for matching username
          required: false
          schema:
            type: string
            description: Optional filter for matching username
            example: joe01doe
          example: joe01doe
        - name: createdEarliest
          in: query
          description: Optional filter with format YYYY-MM-DD for matching earliest
            date when letter was sent
          required: false
          schema:
            type: string
            description: Optional filter with format YYYY-MM-DD for matching earliest
              date when letter was sent
            format: date-time
          example: 2025-08-18
        - name: createdLatest
          in: query
          description: Optional filter with format YYYY-MM-DD for matching latest date
            when letter was sent
          required: false
          schema:
            type: string
            description: Optional filter with format YYYY-MM-DD for matching latest
              date when letter was sent
            format: date-time
          example: 2025-09-18
        - name: page
          in: query
          description: Zero-based page index (0..N)
          required: false
          schema:
            minimum: 0
            type: integer
            default: 0
        - name: size
          in: query
          description: The size of the page to be returned
          required: false
          schema:
            minimum: 1
            type: integer
            default: 20
        - name: sort
          in: query
          description: "Sorting criteria in the format: property,(asc|desc). Default\
          \ sort order is ascending. Multiple sort criteria are supported."
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        "200":
          description: Successful Operation - OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Letters"
        "400":
          description: Bad request
          content:
            application/problem+json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Problem"
                  - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
    post:
      tags:
        - Letter Resource
      summary: Send letter
      description: Send a digital registered letter using Kivra
      operationId: sendLetter
      parameters:
        - name: X-Sent-By
          in: header
          required: true
          schema:
            type: string
        - name: municipalityId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
              required:
                - letter
                - letterAttachments
              type: object
              properties:
                letter:
                  $ref: "#/components/schemas/LetterRequest"
                letterAttachments:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        "201":
          description: Successful operation - Created
          headers:
            Location:
              style: simple
              schema:
                type: string
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Letter"
        "400":
          description: Bad request
          content:
            application/problem+json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Problem"
                  - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /{municipalityId}/eligibility/kivra:
    post:
      tags:
        - Eligibility Resource
      summary: Check if the given partyIds are eligible for receiving digital registered
        letters with Kivra
      description: Returns a list of party IDs that are eligible for Kivra based on
        the provided municipality ID and party IDs
      operationId: checkKivraEligibility
      parameters:
        - name: municipalityId
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EligibilityRequest"
        required: true
      responses:
        "200":
          description: Successful operation
          content:
            '*/*':
              schema:
                type: array
                items:
                  type: string
        "400":
          description: Bad request
          content:
            application/problem+json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Problem"
                  - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /{municipalityId}/letters/{letterId}:
    get:
      tags:
        - Letter Resource
      summary: Get letter
      description: Retrieves a letter by id
      operationId: getLetter
      parameters:
        - name: municipalityId
          in: path
          required: true
          schema:
            type: string
        - name: letterId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful Operation - OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Letter"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad request
          content:
            application/problem+json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Problem"
                  - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /{municipalityId}/letters/{letterId}/signinginfo:
    get:
      tags:
        - Letter Resource
      summary: Get signing information
      description: Retrieves signing information connected to letter matching provided
        id
      operationId: getSigningInformation
      parameters:
        - name: municipalityId
          in: path
          required: true
          schema:
            type: string
        - name: letterId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful Operation - OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SigningInfo"
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad request
          content:
            application/problem+json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Problem"
                  - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /{municipalityId}/letters/{letterId}/attachments/{attachmentId}:
    get:
      tags:
        - Letter Resource
      summary: Downloads letter attachment content
      description: Retrieves attachment content by id
      operationId: downloadLetterAttachment
      parameters:
        - name: municipalityId
          in: path
          required: true
          schema:
            type: string
        - name: letterId
          in: path
          required: true
          schema:
            type: string
        - name: attachmentId
          in: path
          required: true
          schema:
            type: string
      responses:
        "200":
          description: Successful Operation - OK
          content:
            '*/*':
              schema:
                type: string
                format: binary
        "404":
          description: Not Found
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
        "400":
          description: Bad request
          content:
            application/problem+json:
              schema:
                oneOf:
                  - $ref: "#/components/schemas/Problem"
                  - $ref: "#/components/schemas/ConstraintViolationProblem"
        "500":
          description: Internal Server error
          content:
            application/problem+json:
              schema:
                $ref: "#/components/schemas/Problem"
  /api-docs:
    get:
      tags:
        - API
      summary: OpenAPI
      operationId: getApiDocs
      responses:
        "200":
          description: OK
          content:
            application/yaml:
              schema:
                type: string
      x-auth-type: None
      x-throttling-tier: Unlimited
      x-wso2-mutual-ssl: Optional
components:
  schemas:
    LetterStatusRequest:
      required:
        - letterIds
      type: object
      properties:
        letterIds:
          minItems: 1
          type: array
          items:
            type: string
      description: Request model for checking the statuses of given letters
    Problem:
      type: object
      properties:
        title:
          type: string
        detail:
          type: string
        instance:
          type: string
          format: uri
        type:
          type: string
          format: uri
        parameters:
          type: object
          additionalProperties:
            type: object
        status:
          $ref: "#/components/schemas/StatusType"
    StatusType:
      type: object
      properties:
        statusCode:
          type: integer
          format: int32
        reasonPhrase:
          type: string
    ConstraintViolationProblem:
      type: object
      properties:
        cause:
          $ref: "#/components/schemas/ThrowableProblem"
        stackTrace:
          type: array
          items:
            type: object
            properties:
              classLoaderName:
                type: string
              moduleName:
                type: string
              moduleVersion:
                type: string
              methodName:
                type: string
              fileName:
                type: string
              lineNumber:
                type: integer
                format: int32
              className:
                type: string
              nativeMethod:
                type: boolean
        type:
          type: string
          format: uri
        status:
          $ref: "#/components/schemas/StatusType"
        violations:
          type: array
          items:
            $ref: "#/components/schemas/Violation"
        title:
          type: string
        message:
          type: string
        detail:
          type: string
        instance:
          type: string
          format: uri
        parameters:
          type: object
          additionalProperties:
            type: object
        suppressed:
          type: array
          items:
            type: object
            properties:
              stackTrace:
                type: array
                items:
                  type: object
                  properties:
                    classLoaderName:
                      type: string
                    moduleName:
                      type: string
                    moduleVersion:
                      type: string
                    methodName:
                      type: string
                    fileName:
                      type: string
                    lineNumber:
                      type: integer
                      format: int32
                    className:
                      type: string
                    nativeMethod:
                      type: boolean
              message:
                type: string
              localizedMessage:
                type: string
        localizedMessage:
          type: string
    ThrowableProblem:
      type: object
      properties:
        cause:
          $ref: "#/components/schemas/ThrowableProblem"
        stackTrace:
          type: array
          items:
            type: object
            properties:
              classLoaderName:
                type: string
              moduleName:
                type: string
              moduleVersion:
                type: string
              methodName:
                type: string
              fileName:
                type: string
              lineNumber:
                type: integer
                format: int32
              className:
                type: string
              nativeMethod:
                type: boolean
        message:
          type: string
        title:
          type: string
        detail:
          type: string
        instance:
          type: string
          format: uri
        type:
          type: string
          format: uri
        parameters:
          type: object
          additionalProperties:
            type: object
        status:
          $ref: "#/components/schemas/StatusType"
        suppressed:
          type: array
          items:
            type: object
            properties:
              stackTrace:
                type: array
                items:
                  type: object
                  properties:
                    classLoaderName:
                      type: string
                    moduleName:
                      type: string
                    moduleVersion:
                      type: string
                    methodName:
                      type: string
                    fileName:
                      type: string
                    lineNumber:
                      type: integer
                      format: int32
                    className:
                      type: string
                    nativeMethod:
                      type: boolean
              message:
                type: string
              localizedMessage:
                type: string
        localizedMessage:
          type: string
    Violation:
      type: object
      properties:
        field:
          type: string
        message:
          type: string
    LetterStatus:
      type: object
      properties:
        letterId:
          type: string
          description: Letter ID
          example: 43a32404-28ee-480f-a095-00d48109afab
        status:
          type: string
          description: Delivery status of the letter. NOT_FOUND if the letter could
            not be found
          example: NEW
        signingInformation:
          type: string
          description: Information about the signing process. NOT_FOUND if there is
            no signing information available
          example: COMPLETED
      description: Letter status
    LetterRequest:
      required:
        - body
        - contentType
        - organization
        - partyId
        - subject
        - supportInfo
      type: object
      properties:
        partyId:
          type: string
          description: Party ID of the recipient
          example: 7ca29702-a07f-4e13-a66a-4ebc27929cfd
        subject:
          minLength: 1
          type: string
          description: Subject of the letter
          example: Important Notification
        supportInfo:
          $ref: "#/components/schemas/SupportInfo"
        organization:
          $ref: "#/components/schemas/Organization"
        contentType:
          type: string
          description: "Content type of the letter body, e.g., 'text/plain' or 'text/html'"
          example: text/plain
        body:
          minLength: 1
          type: string
          description: Body of the letter
          example: This is the content of the letter. Plain-text body
      description: Request to send a digital registered letter
    Organization:
      required:
        - name
        - number
      type: object
      properties:
        number:
          type: integer
          description: Unique id for the organization
          format: int32
          example: 44
        name:
          minLength: 1
          type: string
          description: Readable name for the organization
          example: Department 44
      description: Information regarding the organizational unit sending the letter
    SupportInfo:
      required:
        - contactInformationEmail
        - contactInformationPhoneNumber
        - contactInformationUrl
        - supportText
      type: object
      properties:
        supportText:
          minLength: 1
          type: string
          description: Support text for the letter
          example: "For support, please contact us at the information below."
        contactInformationUrl:
          minLength: 1
          type: string
          description: URL for contact
          example: https://example.com/support
        contactInformationPhoneNumber:
          type: string
          description: Phone number for contact
          example: "+46123456789"
        contactInformationEmail:
          type: string
          description: Email address for contact
          format: email
          example: support@email.com
      description: Support information for the letter
    Attachment:
      type: object
      properties:
        id:
          type: string
          description: "Unique identifier for the attachment, used for fetching the\
            \ attachment content"
          example: 123e4567-e89b-12d3-a456-426614174001
        fileName:
          type: string
          description: Name of the attachment file
          example: document.pdf
        contentType:
          type: string
          description: Content type of the attachment
          example: application/pdf
      description: List of attachments for the letter
    Letter:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier for the letter
          example: 123e4567-e89b-12d3-a456-426614174000
        subject:
          type: string
          description: Letter subject
          example: Important Notification
        municipalityId:
          type: string
          description: Municipality ID for the sender of the letter
          example: "2281"
        status:
          type: string
          description: Status of the letter
        body:
          type: string
          description: The letter body
        contentType:
          type: string
          description: Content type of the letter body
          example: text/html
        created:
          type: string
          description: When the letter was sent
          format: date-time
          example: 2023-10-09T12:34:56Z
        updated:
          type: string
          description: When the letter was last updated
          format: date-time
          example: 2023-10-09T12:34:56Z
        supportInfo:
          $ref: "#/components/schemas/SupportInfo"
        attachments:
          type: array
          items:
            $ref: "#/components/schemas/Attachment"
      description: Digital registered letter response
      readOnly: true
    EligibilityRequest:
      type: object
      properties:
        partyIds:
          type: array
          items:
            type: string
      description: Eligibility request model
    Direction:
      type: string
      description: The sort order direction
      example: ASC
      enum:
        - ASC
        - DESC
    Letters:
      type: object
      properties:
        _meta:
          $ref: "#/components/schemas/PagingAndSortingMetaData"
        letters:
          type: array
          readOnly: true
          items:
            $ref: "#/components/schemas/Letter"
      description: Paginated response containing a list of letters
    PagingAndSortingMetaData:
      type: object
      properties:
        page:
          type: integer
          description: Current page
          format: int32
          readOnly: true
          example: 5
        limit:
          type: integer
          description: Displayed objects per page
          format: int32
          readOnly: true
          example: 20
        count:
          type: integer
          description: Displayed objects on current page
          format: int32
          readOnly: true
          example: 13
        totalRecords:
          type: integer
          description: Total amount of hits based on provided search parameters
          format: int64
          readOnly: true
          example: 98
        totalPages:
          type: integer
          description: Total amount of pages based on provided search parameters
          format: int32
          readOnly: true
          example: 23
        sortBy:
          type: array
          readOnly: true
          items:
            type: string
            description: The properties to sort by
            readOnly: true
            example: property
        sortDirection:
          $ref: "#/components/schemas/Direction"
      description: PagingAndSortingMetaData model
      readOnly: true
    Device:
      type: object
      properties:
        ipAddress:
          type: string
          description: Ip address used when the letter was signed
          readOnly: true
      description: Information regarding the device used for the signing order
      readOnly: true
    SigningInfo:
      type: object
      properties:
        status:
          type: string
          description: Status of the signing order
          readOnly: true
        signed:
          type: string
          description: Timestamp when the letter was signed by receiving party
          format: date-time
          readOnly: true
        contentKey:
          type: string
          description: The unique Kivra id for the signing order
          readOnly: true
        orderRef:
          type: string
          description: Order reference in Kivra for the signing order
          readOnly: true
        signature:
          type: string
          description: The signature made by the receiving party
          readOnly: true
        ocspResponse:
          type: string
          description: Online certificate status protocol for the signing order
          readOnly: true
        user:
          $ref: "#/components/schemas/User"
        device:
          $ref: "#/components/schemas/Device"
        stepUp:
          $ref: "#/components/schemas/StepUp"
    StepUp:
      type: object
      properties:
        mrtd:
          type: boolean
          description: Whether an MRTD check was performed before the order was completed
          readOnly: true
      description: Information about possible additional verifications that were part
        of the signing order
      readOnly: true
    User:
      type: object
      properties:
        personalIdentityNumber:
          type: string
          description: Personal identity number for the signing party
          readOnly: true
        name:
          type: string
          description: Full name of the signing party
          readOnly: true
        givenName:
          type: string
          description: First name of the signing party
          readOnly: true
        surname:
          type: string
          description: Last name of the signing party
          readOnly: true
      description: Information regarding the signing party
      readOnly: true
  securitySchemes: {}
